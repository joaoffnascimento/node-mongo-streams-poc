version: '3.8'

services:
  # MongoDB Database (Unified Configuration)
  mongodb:
    image: mongo:7
    container_name: streams-mongodb
    restart: 'no'
    ports:
      - '${MONGO_PORT:-27017}:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-password123}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-streams_poc}
    volumes:
      - mongodb-data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
    command: >
      mongod
      --wiredTigerCacheSizeGB 0.25
      --slowms 100
      --profile 1
    networks:
      - streams-network

    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Web API Service (Unified Configuration)
  api:
    build:
      context: ..
      dockerfile: ${DOCKERFILE:-Dockerfile}
    container_name: streams-api
    restart: 'no'
    ports:
      - '${API_PORT:-3000}:3000'
      - '9464:9464'  # Metrics endpoint
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3000
      - METRICS_PORT=9464
      - MONGODB_URI=mongodb://${MONGO_USERNAME:-admin}:${MONGO_PASSWORD:-password123}@mongodb:27017/${MONGO_DATABASE:-streams_poc}?authSource=admin
      - MONGODB_DATABASE=${MONGO_DATABASE:-streams_poc}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    depends_on:
      mongodb:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
    networks:
      - streams-network

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: streams-prometheus
    restart: unless-stopped
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=2h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - streams-network

  # Grafana - Visualization Dashboard
  grafana:
    image: grafana/grafana:10.1.0
    container_name: streams-grafana
    restart: unless-stopped
    ports:
      - '3001:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
      - loki
    networks:
      - streams-network

  # Loki - Log Aggregation
  loki:
    image: grafana/loki:2.9.0
    container_name: streams-loki
    restart: unless-stopped
    ports:
      - '3100:3100'
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - streams-network

  # Promtail - Log Collection
  promtail:
    image: grafana/promtail:2.9.0
    container_name: streams-promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - ./logs:/var/log/app:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - streams-network

  # MongoDB Exporter - Database Metrics (Enhanced)
  mongodb-exporter:
    image: percona/mongodb_exporter:0.40.0
    container_name: streams-mongodb-exporter
    restart: unless-stopped
    ports:
      - '9216:9216'
    environment:
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/?authSource=admin
    command:
      - '--mongodb.uri=mongodb://admin:password123@mongodb:27017/?authSource=admin'
      - '--mongodb.collstats-colls=.*'
      - '--mongodb.indexstats-colls=.*'
      - '--collect-all'
      - '--compatible-mode'
      - '--log.level=debug'
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - streams-network

  # Node Exporter - Host System Metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: streams-node-exporter
    restart: unless-stopped
    ports:
      - '9100:9100'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - streams-network

  # cAdvisor - Container Metrics (Enhanced)
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: streams-cadvisor
    restart: unless-stopped
    ports:
      - '8080:8080'
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    command:
      - '--housekeeping_interval=1s'
      - '--max_housekeeping_interval=5s'
      - '--allow_dynamic_housekeeping=true'
      - '--global_housekeeping_interval=1s'
      - '--docker_only=false'
      - '--store_container_labels=false'
      - '--whitelisted_container_labels=io.kubernetes.container.name,io.kubernetes.pod.name,io.kubernetes.pod.namespace'
    networks:
      - streams-network

  # Netdata - Enhanced System and Network Monitoring
  netdata:
    image: netdata/netdata:v1.42.0
    container_name: streams-netdata
    restart: unless-stopped
    ports:
      - '19999:19999'
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    volumes:
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - NETDATA_CLAIM_TOKEN=${NETDATA_CLAIM_TOKEN:-}
      - NETDATA_CLAIM_URL=https://app.netdata.cloud
      - NETDATA_CLAIM_ROOMS=${NETDATA_CLAIM_ROOMS:-}
    networks:
      - streams-network

  # Blackbox Exporter - Network Connectivity Testing
  blackbox-exporter:
    image: prom/blackbox-exporter:v0.24.0
    container_name: streams-blackbox-exporter
    restart: unless-stopped
    ports:
      - '9115:9115'
    volumes:
      - ./monitoring/blackbox/blackbox.yml:/config/blackbox.yml:ro
    command:
      - '--config.file=/config/blackbox.yml'
    networks:
      - streams-network

  # Process Exporter - Enhanced Process Monitoring
  process-exporter:
    image: ncabatoff/process-exporter:0.7.10
    container_name: streams-process-exporter
    restart: unless-stopped
    ports:
      - '9256:9256'
    volumes:
      - /proc:/host/proc:ro
      - ./monitoring/process-exporter/process-exporter.yml:/config/process-exporter.yml:ro
    command:
      - '--procfs=/host/proc'
      - '--config.path=/config/process-exporter.yml'
    privileged: true
    networks:
      - streams-network

networks:
  streams-network:
    driver: bridge

volumes:
  mongodb-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local
